[
{
	"uri": "/vi/2-prerequiste/2.1-createec2/",
	"title": "Chuẩn bị VPC và EC2",
	"tags": [],
	"description": "",
	"content": "Trong bước này, chúng ta sẽ cần tạo một VPC có 2 subnet public / private. Sau đó tạo 1 EC2 Instance Linux nằm trong public subnet, 1 EC2 Instance Windows nằm trong private subnet.\nTổng quan kiến trúc sau khi các bạn hoàn tất bước này sẽ như sau:\nĐể tìm hiểu cách tạo các EC2 instance và VPC với public/private subnet các bạn có thể tham khảo bài lab :\n Giới thiệu về Amazon EC2 Làm việc với Amazon VPC  Nội dung  Tạo VPC Tạo Public subnet Tạo Private subnet Tạo security group Tạo máy chủ Linux public Tạo máy chủ Windows private  "
},
{
	"uri": "/vi/4-s3log/4.1-updateiamrole/",
	"title": "Cập nhật IAM Role",
	"tags": [],
	"description": "",
	"content": "Để các EC2 instance của chúng ta có thể gửi session log tới S3 bucket , chúng ta sẽ cần cập nhật IAM Role đã gán vào EC2 instance bằng cách thêm vào policy cho phép quyền truy cập vào S3.\nCập nhật IAM Role  Truy cập vào giao diện quản trị dịch vụ IAM   Click Roles. Tại ô tìm kiếm , điền SSM. Click vào role SSM-Role.  Click Attach policies.  Tại ô Search điền S3.   Click chọn policy AmazonS3FullAccess. Click Attach policy.  Trong thực tế chúng ta sẽ cấp quyền chặt chẽ hơn tới S3 bucket chỉ định. Trong khuôn khổ bài lab này chúng ta sử dụng policy AmazonS3FullAccess cho tiện dụng.\n\rTiếp theo chúng ta sẽ tiến hành tạo S3 bucket để lưu trữ session logs.\n"
},
{
	"uri": "/vi/",
	"title": "E-commerce Microservices trên AWS",
	"tags": [],
	"description": "",
	"content": "Xây dựng Hệ thống Thương mại Điện tử với Kiến trúc Microservices trên AWS Tổng quan Trong workshop toàn diện này, bạn sẽ học cách thiết kế và triển khai một hệ thống thương mại điện tử có khả năng mở rộng sử dụng kiến trúc microservices trên AWS. Bạn sẽ xây dựng một giải pháp hoàn chỉnh bao gồm nhiều dịch vụ như supplier service, consumer service, inventory service, product service, payment service và order service, tất cả được điều phối thông qua API gateway với service discovery và quản lý cấu hình.\nKiến trúc bao gồm:\n API Gateway: Điểm vào trung tâm cho tất cả các yêu cầu từ client Service Discovery: Tự động đăng ký và khám phá dịch vụ Configuration Server: Quản lý cấu hình tập trung Các dịch vụ cốt lõi: Supplier, Consumer, Inventory, Product, Payment và Order services AWS Cognito: Xác thực và phân quyền người dùng Container Orchestration: Triển khai microservices sử dụng containers AWS CDK: Infrastructure as Code cho triển khai tự động  Những gì bạn sẽ học:  Triển khai hạ tầng sử dụng AWS CDK (TypeScript) Xây dựng và containerize microservices Triển khai giao tiếp service-to-service Thiết lập cấu hình tập trung và service discovery Giám sát và log các ứng dụng phân tán  Nội dung  Giới thiệu về Kiến trúc Microservices Thiết lập Hạ tầng với CDK Triển khai Core Services Giao tiếp \u0026amp; Service Discovery Dọn dẹp tài nguyên  "
},
{
	"uri": "/vi/1-introduce/",
	"title": "Giới thiệu về Kiến trúc Microservices",
	"tags": [],
	"description": "",
	"content": "Kiến trúc Microservices là gì? Kiến trúc Microservices là một phương pháp phát triển phần mềm trong đó ứng dụng lớn được xây dựng như một tập hợp các dịch vụ nhỏ, độc lập, giao tiếp với nhau thông qua các API được định nghĩa rõ ràng. Mỗi dịch vụ tập trung vào một khả năng kinh doanh cụ thể và có thể được phát triển, triển khai và mở rộng một cách độc lập.\nLợi ích của Microservices trên AWS Bằng cách triển khai kiến trúc microservices trên AWS, bạn sẽ có được những ưu điểm sau:\n Khả năng mở rộng: Mỗi dịch vụ có thể được mở rộng độc lập dựa trên nhu cầu Đa dạng công nghệ: Các dịch vụ khác nhau có thể sử dụng ngôn ngữ lập trình và cơ sở dữ liệu khác nhau Cô lập lỗi: Lỗi trong một dịch vụ không làm sập toàn bộ ứng dụng Phát triển nhanh hơn: Các team có thể làm việc độc lập trên các dịch vụ khác nhau Bảo trì dễ dàng hơn: Codebase nhỏ hơn dễ hiểu và bảo trì hơn Triển khai liên tục: Các dịch vụ có thể được triển khai độc lập mà không ảnh hưởng đến các dịch vụ khác  Các thành phần của Hệ thống Thương mại điện tử Trong hệ thống thương mại điện tử microservices của chúng ta, chúng ta sẽ triển khai các dịch vụ cốt lõi sau:\nCác dịch vụ kinh doanh cốt lõi  Supplier Service: Quản lý thông tin nhà cung cấp và mối quan hệ đối tác Consumer Service: Xử lý hồ sơ khách hàng và sở thích Inventory Service: Theo dõi mức tồn kho và tình trạng sản phẩm Product Service: Quản lý danh mục sản phẩm và thông tin Payment Service: Xử lý giao dịch thanh toán một cách an toàn Order Service: Xử lý quản lý vòng đời đơn hàng  Các thành phần hạ tầng  API Gateway: Điểm vào duy nhất cho tất cả các yêu cầu từ client Service Discovery: Tự động đăng ký và định vị dịch vụ Configuration Server: Quản lý cấu hình tập trung AWS Cognito: Xác thực và phân quyền người dùng  Các dịch vụ AWS chúng ta sẽ sử dụng Trong suốt workshop này, chúng ta sẽ tận dụng các dịch vụ AWS khác nhau:\n Amazon ECS/EKS: Điều phối container AWS ALB: Application Load Balancer để phân phối traffic Amazon ECR: Container registry cho Docker images AWS CloudWatch: Giám sát và logging Amazon VPC: Cô lập mạng và bảo mật AWS IAM: Quản lý danh tính và quyền truy cập  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.1-public-instance/",
	"title": "Kết nối đến máy chủ Public",
	"tags": [],
	"description": "",
	"content": " Truy cập vào giao diện quản trị của dịch vụ EC2.   Click chọn Public Linux Instance. Click Actions. Click Security. Click Modify IAM role.  Tại trang Modify IAM role.   Click chọn SSM-Role. Click Save.  Bạn sẽ cần chờ khoảng 10 phút trước khi thực hiện bước tiếp theo. Thời gian này EC2 instance của chúng ta sẽ tự động đăng ký với Session Manager.\n\rTruy cập vào giao diện quản trị của dịch vụ AWS Systems Manager   Kéo thanh trượt menu bên trái xuống dưới. Click Session Manager. Click Start Session.  Sau đó chọn Public Linux Instance và click Start session để truy cập vào instance.  Terminal sẽ xuất hiện trên trình duyệt. Kiểm tra với câu lệnh sudo tcpdump -nn port 22 và sudo tcpdump  chúng ta sẽ thấy không có traffic của SSH mà chỉ có traffic HTTPS.  Ở trên, chúng ta đã tạo kết nối vào public instance mà không cần mở cổng SSH 22, giúp cho việc bảo mật tốt hơn, tránh mọi sự tấn công tới cổng SSH.\nMột nhược điểm của cách làm trên là ta phải mở Security Group outbound ở cổng 443 ra ngoài internet. Vì là public instance nên có thể sẽ không vấn đề gì nhưng nếu bạn muốn bảo mật hơn nữa, bạn có thể khoá cổng 443 ra ngoài internet mà vẫn sử dụng được Session Manager. Chúng ta sẽ đi qua cách làm này ở phần private instance dưới đây.\n\rBạn có thể terminate để kết thúc session đang kết nối trước khi qua bước tiếp theo.\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.1-enablevpcdns/",
	"title": "Kích hoạt DNS hostnames",
	"tags": [],
	"description": "",
	"content": "Kích hoạt tính năng DNS hostnames trên VPC.  Để tạo được VPC Endpoint chúng ta sẽ cần bật tính năng DNS hostnames trên VPC.    Truy cập đến giao diện quản trị của dịch vụ VPC\n  Click Your VPCs.\n  Chọn Lab VPC.\n  Click Actions.\n  Click Edit DNS hostnames.\n  Click Endpoint, sau đó click Create Endpoint.\n  Tại trang Edit DNS hostnames.   Click chọn Enable. Click Save changes.  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.1-endpointssm/",
	"title": "Tạo Endpoint ssm",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint SSM  Truy cập đến giao diện quản trị của dịch vụ VPC   Click Endpoints. Click Create endpoint.  Tại trang Create endpoint.   Tại mục Name tag điền SSM. Tại mục Service Category chọn AWS Services. Tại mục Service Name, Tại mục Service category chọn: AWS services Tại mục Service Name nhập: SSM sau đó chọn Service Name: com.amazonaws.ap-southeast-1.ssm.  Tại cột Service Name, click chọn com.amazonaws.ap-southeast-1.ssm.   Tại mục VPC, chọn Lab VPC. Chọn AZ đầu tiên, sau đó chọn subnet Lab Private Subnet.  Kéo chuột xuống dưới.   Tại mục Security Group, chọn Security group SG VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access  Kéo chuột xuống dưới cùng.   Click Create endpoint.  Chúng ta đã tạo xong VPC Interface Endpoint cho SSM.  "
},
{
	"uri": "/vi/2-prerequiste/2.1-createec2/2.1.1-createvpc/",
	"title": "Tạo VPC ",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Lab VPC  Truy cập giao diện quản trị dịch vụ VPC   Click Your VPC. Click Create VPC.  Tại trang Create VPC.   Tại mục Name tag điền Lab VPC. Tại mục IPv4 CIDR điền : 10.10.0.0/16. Click Create VPC.  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/",
	"title": "Tạo kết nối đến máy chủ EC2 Private",
	"tags": [],
	"description": "",
	"content": "Đối với Windows instance nằm trong private subnet, không có public IP, không có internet gateway nên không thể đi ra ngoài internet.\nVới loại instance này, cách làm truyền thống là ta sẽ sử dụng kỹ thuật Bastion host tốn nhiều chi phí và công sức, nhưng ở đây chúng ta sẽ sử dụng Session Manager với loại này.\nCơ bản là private instance vẫn phải mở cổng TCP 443 tới System Manager, nhưng không cho kết nối đó đi ra ngoài internet mà chỉ cho đi trong chính VPC của mình, nên đảm bảo được vấn đề bảo mật.\nĐể làm được điều đó, ta phải đưa endpoint của System Manager vào trong VPC, nghĩa là sử dụng VPC interface endpoint:\nVPC interface endpoint được gắn với subnet nên cách làm này không những với private subnet mà còn có thể làm với public subnet, nghĩa là với public subnet, bạn hoàn toàn có thể không cho TCP 443 đi ra ngoài internet.\nNội dung:  Kích hoạt DNS hostnames Tạo VPC Endpoint Kết nối Private Instance  "
},
{
	"uri": "/vi/4-s3log/4.2-creates3bucket/",
	"title": "Thiết lập API Gateway",
	"tags": [],
	"description": "",
	"content": "Cấu hình API Gateway cho E-commerce Microservices Trong phần này, chúng ta sẽ cấu hình Amazon API Gateway làm điểm vào duy nhất cho hệ thống microservices thương mại điện tử. API Gateway sẽ định tuyến requests đến microservices phù hợp sử dụng service discovery.\nTriển khai CDK cho API Gateway // lib/stacks/api-gateway-stack.ts import { Stack, StackProps } from \u0026#39;aws-cdk-lib\u0026#39;; import { HttpApi, HttpMethod, CorsHttpMethod } from \u0026#39;@aws-cdk/aws-apigatewayv2-alpha\u0026#39;; import { HttpServiceDiscoveryIntegration } from \u0026#39;@aws-cdk/aws-apigatewayv2-integrations-alpha\u0026#39;; import { VpcLink } from \u0026#39;@aws-cdk/aws-apigatewayv2-alpha\u0026#39;; import { Construct } from \u0026#39;constructs\u0026#39;; export class ApiGatewayStack extends Stack { public readonly httpApi: HttpApi; constructor(scope: Construct, id: string, props: ApiGatewayStackProps) { super(scope, id, props); // VPC Link cho private integration  const vpcLink = new VpcLink(this, \u0026#39;EcommerceVpcLink\u0026#39;, { vpc: props.vpc, description: \u0026#39;VPC Link for e-commerce microservices\u0026#39;, }); // HTTP API Gateway  this.httpApi = new HttpApi(this, \u0026#39;EcommerceApi\u0026#39;, { apiName: \u0026#39;ecommerce-microservices-api\u0026#39;, description: \u0026#39;HTTP API for e-commerce microservices\u0026#39;, corsPreflight: { allowOrigins: [\u0026#39;*\u0026#39;], allowMethods: [CorsHttpMethod.ANY], allowHeaders: [\u0026#39;*\u0026#39;], }, }); // Thêm routes cho mỗi service  this.addServiceRoutes(vpcLink, props.services); } private addServiceRoutes(vpcLink: VpcLink, services: ServiceInfo[]) { const routes = [ { path: \u0026#39;products\u0026#39;, service: \u0026#39;product-service\u0026#39; }, { path: \u0026#39;inventory\u0026#39;, service: \u0026#39;inventory-service\u0026#39; }, { path: \u0026#39;orders\u0026#39;, service: \u0026#39;order-service\u0026#39; }, { path: \u0026#39;payments\u0026#39;, service: \u0026#39;payment-service\u0026#39; }, { path: \u0026#39;suppliers\u0026#39;, service: \u0026#39;supplier-service\u0026#39; }, { path: \u0026#39;consumers\u0026#39;, service: \u0026#39;consumer-service\u0026#39; }, ]; routes.forEach(route =\u0026gt; { const integration = new HttpServiceDiscoveryIntegration( `${route.service}Integration`, services.find(s =\u0026gt; s.name === route.service)?.cloudMapService!, { vpcLink, } ); this.httpApi.addRoutes({ path: `/api/v1/${route.path}/{proxy+}`, methods: [HttpMethod.ANY], integration, }); }); } } Cấu trúc API Routes API Gateway định tuyến requests dựa trên URL paths:\nGET /api/v1/products/* → product-service.ecommerce.local\rGET /api/v1/inventory/* → inventory-service.ecommerce.local POST /api/v1/orders/* → order-service.ecommerce.local\rPOST /api/v1/payments/* → payment-service.ecommerce.local\rGET /api/v1/suppliers/* → supplier-service.ecommerce.local\rGET /api/v1/consumers/* → consumer-service.ecommerce.local\rKiểm thử API Gateway Sau khi deploy, bạn có thể test các endpoints:\n# Lấy API Gateway URL từ CDK output export API_URL=$(aws cloudformation describe-stacks \\  --stack-name ApiGatewayStack \\  --query \u0026#39;Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue\u0026#39; \\  --output text) # Test product service curl -X GET \u0026#34;${API_URL}/api/v1/products\u0026#34; # Test với specific product ID curl -X GET \u0026#34;${API_URL}/api/v1/products/123\u0026#34; # Tạo order mới curl -X POST \u0026#34;${API_URL}/api/v1/orders\u0026#34; \\  -H \u0026#34;Content-Type: application/json\u0026#34; \\  -d \u0026#39;{ \u0026#34;customerId\u0026#34;: \u0026#34;customer-123\u0026#34;, \u0026#34;items\u0026#34;: [ { \u0026#34;productId\u0026#34;: \u0026#34;product-456\u0026#34;, \u0026#34;quantity\u0026#34;: 2, \u0026#34;price\u0026#34;: 29.99 } ] }\u0026#39; Monitoring API Gateway Kích hoạt logging và monitoring:\n// Thêm vào API Gateway stack import { LogGroup } from \u0026#39;aws-cdk-lib/aws-logs\u0026#39;; const accessLogGroup = new LogGroup(this, \u0026#39;ApiGatewayAccessLogs\u0026#39;, { logGroupName: \u0026#39;/aws/apigateway/ecommerce-api\u0026#39;, retention: RetentionDays.ONE_WEEK, }); this.httpApi.addStage(\u0026#39;prod\u0026#39;, { stageName: \u0026#39;prod\u0026#39;, autoDeploy: true, accessLogSettings: { destinationArn: accessLogGroup.logGroupArn, format: JSON.stringify({ requestId: \u0026#39;$context.requestId\u0026#39;, requestPath: \u0026#39;$context.path\u0026#39;, requestMethod: \u0026#39;$context.httpMethod\u0026#39;, responseLatency: \u0026#39;$context.responseLatency\u0026#39;, status: \u0026#39;$context.status\u0026#39;, }), }, }); Cân nhắc Bảo mật Cho môi trường production, hãy xem xét thêm:\n API Keys cho rate limiting JWT Authorizers cho authentication WAF cho bảo vệ security Request validation cho input sanitization  Bước tiếp theo Sau khi thiết lập API Gateway:\n Deploy stack: cdk deploy ApiGatewayStack Test tất cả service endpoints Cấu hình monitoring và alerting Thiết lập authentication nếu cần3 Bucket\u0026quot; date : \u0026ldquo;r Sys.Date()\u0026rdquo; weight : 2 chapter : false pre : \u0026quot; 4.2 \u0026quot;   Trong bước này, chúng ta sẽ tạo 1 S3 bucket để lưu trữ các session logs được gửi từ các EC2 instance.\nTạo S3 Bucket  Truy cập giao diện quản trị dịch vụ S3   Click Create bucket.  Tại trang Create bucket.   Tại mục Bucket name điền tên bucket lab-yourname-bucket-0001 Tại mục Region chọn Region bạn đang làm lab hiện tại.  Tên S3 bucket phải đảm bảo không trùng với toàn bộ S3 bucket khác trong hệ thống. Bạn có thể thay thế tên mình và điền số ngẫu nhiên khi tạo tên S3 bucket.\n\rKéo chuột xuống phía dưới và click Create bucket.  Khi tạo S3 bucket chúng ta đã thực hiện Block all public access nên các EC2 instance của chúng ta sẽ không thể kết nối tới S3 thông qua mạng internet. Trong bước tiếp theo chúng ta sẽ cấu hình tính năng S3 Gateway Endpoint để cho phép các EC2 instance có thể kết nối tới S3 bucket thông qua mạng nội bộ của VPC.\n\r"
},
{
	"uri": "/vi/2-prerequiste/",
	"title": "Thiết lập Hạ tầng với CDK",
	"tags": [],
	"description": "",
	"content": "\rTrong phần này, chúng ta sẽ sử dụng AWS CDK (Cloud Development Kit) để định nghĩa và triển khai hạ tầng microservices dưới dạng code. CDK cho phép chúng ta định nghĩa cloud resources bằng các ngôn ngữ lập trình quen thuộc và đảm bảo triển khai nhất quán, có thể lặp lại.\n\rĐiều kiện tiên quyết Trước khi bắt đầu, đảm bảo bạn có:\n AWS CLI: Đã cấu hình với quyền phù hợp Node.js: Phiên bản 16 trở lên AWS CDK: Phiên bản mới nhất (npm install -g aws-cdk) Docker: Để build container images Kiến thức TypeScript cơ bản: CDK stacks sẽ được viết bằng TypeScript  Tổng quan Hạ tầng Ứng dụng CDK của chúng ta sẽ tạo:\n VPC với Public/Private Subnets: Cô lập mạng cho các services ECS Fargate Cluster: Hosting container serverless ECR Repositories: Lưu trữ container images API Gateway: HTTP API cho truy cập services Service Discovery: AWS Cloud Map cho giao tiếp inter-service IAM Roles \u0026amp; Policies: Quản lý truy cập an toàn CloudWatch: Logging và monitoring  Cấu trúc CDK Project ecommerce-microservices-cdk/\r├── bin/\r│ └── app.ts # CDK App entry point\r├── lib/\r│ ├── network-stack.ts # VPC, subnets, security groups\r│ ├── ecr-stack.ts # Container repositories\r│ ├── ecs-stack.ts # ECS cluster và services\r│ ├── api-gateway-stack.ts # Cấu hình API Gateway\r│ └── monitoring-stack.ts # Thiết lập CloudWatch\r├── services/\r│ ├── product-service/ # Product microservice\r│ ├── order-service/ # Order microservice\r│ ├── payment-service/ # Payment microservice\r│ ├── inventory-service/ # Inventory microservice\r│ ├── supplier-service/ # Supplier microservice\r│ └── consumer-service/ # Consumer microservice\r├── cdk.json\r└── package.json\rLợi ích chính của CDK cho Microservices:  Infrastructure as Code: Version control hạ tầng của bạn Type Safety: Phát hiện lỗi tại thời điểm compile Reusable Constructs: Chia sẻ infrastructure patterns Cross-Stack References: Tích hợp dễ dàng giữa các services Automated Rollbacks: Thực hành triển khai an toàn  Nội dung  Khởi tạo CDK Project Thiết lập IAM Roles và Policies  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.2-endpointssmmessages/",
	"title": "Tạo Endpoint ssmmessages",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint SSMMESSAGES  Truy cập đến giao diện quản trị của dịch vụ VPC   Click Endpoints. Click Create endpoint.  Tại trang Create endpoint.   Tại mục Name tag điền SSMMESSAGES. Tại mục Service Category chọn AWS Services. Tại mục Service Name, Tại mục Service category chọn: AWS services Tại mục Service Name nhập: ssmmessages sau đó chọn Service Name: com.amazonaws.ap-southeast-1.ssmmessages.  Tại cột Service Name, click chọn com.amazonaws.ap-southeast-1.ssmmessages.   Tại mục VPC, chọn Lab VPC. Chọn AZ đầu tiên, sau đó chọn subnet Lab Private Subnet.  Kéo chuột xuống dưới.   Tại mục Security Group, chọn Security group SG VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access  Kéo chuột xuống dưới cùng.   Click Create endpoint.  Chúng ta đã tạo xong VPC Interface Endpoint SSMMESSAGES.  "
},
{
	"uri": "/vi/2-prerequiste/2.2-createiamrole/",
	"title": "Tạo IAM Role",
	"tags": [],
	"description": "",
	"content": "Tạo IAM Role Trong bước này chúng ta sẽ tiến hành tạo IAM Role. Trong IAM Role này sẽ được gán policy AmazonSSMManagedInstanceCore, đây là policy cho phép máy chủ EC2 có thể giao tiếp với Session Manager.\n Truy cập vào giao diện quản trị dịch vụ IAM Ở thanh điều hướng bên trái, click Roles.  Click Create role.  Click AWS service và click EC2.   Click Next: Permissions.  Trong ô Search, điền AmazonSSMManagedInstanceCore và ấn phím Enter để tìm kiếm policy này.   Click chọn policy AmazonSSMManagedInstanceCore. Click Next: Tags.  Click Next: Review. Đặt tên cho Role là SSM-Role ở Role Name   Click Create Role .  Tiếp theo chúng ta sẽ thực hiện kết nối đến các máy chủ EC2 chúng ta đã tạo bằng Session Manager.\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createec2/2.1.2-createpublicsubnet/",
	"title": "Tạo Public subnet",
	"tags": [],
	"description": "",
	"content": "Tạo Public subnet  Click Subnets.   Click Create subnet.  Tại trang Create subnet.   Tại mục VPC ID click chọn Lab VPC. Tại mục Subnet name điền Lab Public Subnet. Tại mục Availability Zone chọn Availability zone đầu tiên. Tại mục IPv4 CIRD block điền 10.10.1.0/24.   Kéo xuống cuối trang , click Create subnet.\n  Click chọn Lab Public Subnet.\n   Click Actions. Click Edit subnet settings.  Click chọn Enable auto-assign public IPv4 address.   Click Save.  Click Internet Gateways.   Click Create internet gateway.  Tại trang Create internet gateway.   Tại mục Name tag điền Lab IGW. Click Create internet gateway.  Sau khi tạo thành công, click Actions.   Click Attach to VPC.  Tại trang Attach to VPC.   Tại mục Available VPCs chọn Lab VPC. Click Attach internet gateway. Kiểm tra quá trình attach thành công như hình dưới.  Tiếp theo chúng ta sẽ tạo một custom route table để gán vào Lab Public Subnet.   Click Route Tables. Click Create route table.  Tại trang Create route table.   Tại mục Name, điền Lab Publicrtb. Tại mục VPC, chọn Lab VPC. Click Create route table.  Sau khi tạo route table thành công.   Click Edit routes.  Tại trang Edit routes.   Click Add route. Tại mục Destination điền 0.0.0.0/0 Tại mục Target chọn Internet Gateway sau đó chọn Lab IGW. Click Save changes.  Click tab Subnet associations.   Click Edit subnet associations để tiến hành associate custom routable chúng ta vừa tạo vào Lab Public Subnet.  Tại trang Edit subnet associations.   Click chọn Lab Public Subnet. Click Save associations.  Kiểm tra thông tin route table đã được associate với Lab Public Subnet và thông tin route đi internet đã được trỏ đến Internet Gateway như hình dưới.  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/",
	"title": "Tạo VPC Endpoint",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint SSM  Chúng ta sẽ tạo 3 interface endpoint yêu cầu bởi Session Manager:  Interface endpoint:  com.amazonaws.region.ssm com.amazonaws.region.ec2messages com.amazonaws.region.ssmmessages      Bạn có thể tham khảo thêm tại đây\nNội dung:  Tạo Endpoint ssm Tạo Endpoint ssmmessages Tạo Endpoint ec2messages  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.3-connectec2/",
	"title": "Kết nối EC2 Private",
	"tags": [],
	"description": "",
	"content": "Gán IAM role và restart EC2 instance.  Truy cập giao diện quản trị dịch vụ EC2   Click chọn Private Windows Instance. Click Actions. Click Security. Click Modify IAM Role.  Tại trang Modify IAM Role.   Tại mục IAM role, chọn SSM-Role. Click Save.  Click chọn Private Windows Instance.   Click Instance state. Click Reboot instance để thực hiện restart, sau đó click Reboot để xác nhận.  Bạn hãy đợi 5 phút trước khi làm bước tiếp theo nhé.\n\rKết nối tới máy chủ private EC2 instance.  Truy cập vào giao diện quản trị dịch vụ System Manager - Session Manager   Click Start session.  Click chọn Private Windows Instance.   Click Start session.  Gõ lệnh ipconfig để kiểm tra thông tin địa chỉ IP của Private Windows Instance như dưới đây.  "
},
{
	"uri": "/vi/3-accessibilitytoinstances/",
	"title": "Triển khai Core Services",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ triển khai các core microservices sử dụng hạ tầng CDK mà chúng ta đã thiết lập. Mỗi service sẽ được containerize và triển khai lên ECS Fargate để có khả năng mở rộng, hosting container serverless.\nTổng quan Core Services Nền tảng thương mại điện tử của chúng ta bao gồm sáu microservices chính:\n Product Service: Quản lý danh mục sản phẩm, categories và pricing Inventory Service: Theo dõi mức tồn kho và availability Order Service: Xử lý lifecycle đơn hàng và fulfillment Payment Service: Xử lý payments và transactions Supplier Service: Quản lý mối quan hệ vendor và dữ liệu supplier Consumer Service: Xử lý hồ sơ khách hàng và preferences  Chiến lược Triển khai Mỗi microservice tuân theo pattern triển khai nhất quán:\n Containerization: Docker images được lưu trữ trong ECR ECS Fargate: Serverless container hosting Service Discovery: Tự động đăng ký với AWS Cloud Map Health Checks: Giám sát built-in và auto-recovery Environment Configuration: Quản lý config tập trung  Cấu trúc CDK Service Stack // Ví dụ: Product Service Stack export class ProductServiceStack extends Stack { constructor(scope: Construct, id: string, props: ServiceStackProps) { super(scope, id, props); // Task Definition  const taskDefinition = new FargateTaskDefinition(this, \u0026#39;ProductTaskDef\u0026#39;, { cpu: 256, memoryLimitMiB: 512, }); // Container Definition  const container = taskDefinition.addContainer(\u0026#39;ProductContainer\u0026#39;, { image: ContainerImage.fromEcrRepository(props.ecrRepository), environment: { NODE_ENV: \u0026#39;production\u0026#39;, SERVICE_NAME: \u0026#39;product-service\u0026#39;, }, logging: LogDrivers.awsLogs({ streamPrefix: \u0026#39;product-service\u0026#39;, logGroup: new LogGroup(this, \u0026#39;ProductLogGroup\u0026#39;, { logGroupName: \u0026#39;/ecs/product-service\u0026#39;, retention: RetentionDays.ONE_WEEK, }), }), }); // ECS Service  const service = new FargateService(this, \u0026#39;ProductService\u0026#39;, { cluster: props.cluster, taskDefinition, desiredCount: 2, assignPublicIp: false, cloudMapOptions: { name: \u0026#39;product-service\u0026#39;, cloudMapNamespace: props.namespace, }, }); } } Quy trình Build Container Image Mỗi service bao gồm Dockerfile được tối ưu cho production:\n# Multi-stage build cho images nhỏ hơnFROMnode:18-alpine AS builderWORKDIR/appCOPY package*.json ./RUN npm ci --only=productionFROMnode:18-alpine AS runtimeWORKDIR/appCOPY --from=builder /app/node_modules ./node_modulesCOPY . .EXPOSE3000USERnodeCMD [\u0026#34;npm\u0026#34;, \u0026#34;start\u0026#34;]Giao tiếp Service Các services giao tiếp sử dụng:\n Service Discovery: AWS Cloud Map cho internal service resolution API Gateway: External client access thông qua HTTP API Direct Service Calls: Internal REST API communication Event-Driven Architecture: Triển khai trong tương lai với SQS/SNS  Nội dung 3.1. Triển khai Product và Inventory Services 3.2. Triển khai Order và Payment Services\n"
},
{
	"uri": "/vi/3-accessibilitytoinstances/3.2-private-instance/3.2.2-createvpcendpoint/3.2.2.3-endpointec2messages/",
	"title": "Tạo Endpoint ec2messages",
	"tags": [],
	"description": "",
	"content": "Tạo VPC Endpoint EC2MESSAGES  Truy cập đến giao diện quản trị của dịch vụ VPC   Click Endpoints. Click Create endpoint.  Tại trang Create endpoint.   Tại mục Name tag điền SSMMESSAGES. Tại mục Service Category chọn AWS Services. Tại mục Service Name, Tại mục Service category chọn: AWS services Tại mục Service Name nhập: ec2 sau đó chọn Service Name: com.amazonaws.ap-southeast-1.ec2messages.  Tại cột Service Name, click chọn com.amazonaws.ap-southeast-1.ec2messages.   Tại mục VPC, chọn Lab VPC. Chọn AZ đầu tiên, sau đó chọn subnet Lab Private Subnet.  Kéo chuột xuống dưới.   Tại mục Security Group, chọn Security group SG VPC Endpoint mà chúng ta đã tạo trước đó. Tại mục Policy, chọn Full access  Kéo chuột xuống dưới cùng.   Click Create endpoint.   Chúng ta đã tạo xong VPC Interface Endpoint EC2MESSAGES.\n  Đảm bảo 3 endpoint cần thiết đã được tạo như hình dưới.\n  "
},
{
	"uri": "/vi/2-prerequiste/2.1-createec2/2.1.3-createprivatesubnet/",
	"title": "Tạo Private subnet",
	"tags": [],
	"description": "",
	"content": "Tạo Private subnet  Click Subnets.   Click Create subnet.  Tại trang Create subnet.   Tại mục VPC ID click chọn Lab VPC. Tại mục Subnet name điền Lab Private Subnet. Tại mục Availability Zone chọn Availability zone đầu tiên. Tại mục IPv4 CIRD block điền 10.10.2.0/24.  Kéo xuống cuối trang , click Create subnet.  Bước tiếp theo chúng ta sẽ tạo các security group cần thiết cho bài lab.\n"
},
{
	"uri": "/vi/4-s3log/4.3-creategwes3/",
	"title": "Tạo S3 Gateway endpoint",
	"tags": [],
	"description": "",
	"content": " Truy cập vào giao diện quản trị dịch vụ VPC   Click Endpoints. Click Create endpoint.  Tại trang Create endpoint.   Tại mục Name tag điền S3GW. Tại mục Service Category click chọn AWS services. Tại ô tìm kiếm điền S3, sau đó chọn com.amazonaws.[region].s3  Tại mục Services chọn com.amazonaws.[region].s3 có Type là Gateway.   Tại mục VPC , chọn Lab VPC. Tại mục Route tables, chọn cả 2 route table.  Kéo chuột xuống dưới cùng, click Create endpoint.  Bước tiếp theo chúng ta sẽ tiến hành cấu hình Session Manager để có thể lưu trữ các session logs tới S3 bucket chúng ta đã tạo.\n"
},
{
	"uri": "/vi/4-s3log/",
	"title": "Giao tiếp &amp; Service Discovery",
	"tags": [],
	"description": "",
	"content": "Trong phần này, chúng ta sẽ triển khai service discovery và các patterns giao tiếp cho microservices. Chúng ta sẽ thiết lập AWS Cloud Map để tự động đăng ký service và cấu hình API Gateway làm điểm vào external.\nService Discovery với AWS Cloud Map AWS Cloud Map cung cấp service discovery cho cloud resources. Khi services được triển khai lên ECS, chúng tự động đăng ký với Cloud Map, làm cho chúng có thể được phát hiện bởi các services khác.\nLợi ích chính:  Automatic Registration: Services tự đăng ký khi chúng start Health Checking: Unhealthy services được tự động remove DNS-based Discovery: Services có thể tìm thấy nhau bằng DNS queries đơn giản Không cần Load Balancer: Giao tiếp service-to-service trực tiếp  Cấu hình API Gateway API Gateway của chúng ta phục vụ như điểm vào duy nhất cho external clients, định tuyến requests đến microservices phù hợp dựa trên URL path.\nCấu trúc API Routes: /api/v1/products/* → product-service\r/api/v1/inventory/* → inventory-service /api/v1/orders/* → order-service\r/api/v1/payments/* → payment-service\r/api/v1/suppliers/* → supplier-service\r/api/v1/consumers/* → consumer-service\rTriển khai CDK Thiết lập Cloud Map Namespace: export class ServiceDiscoveryStack extends Stack { public readonly namespace: PrivateDnsNamespace; constructor(scope: Construct, id: string, props: StackProps) { super(scope, id, props); this.namespace = new PrivateDnsNamespace(this, \u0026#39;EcommerceNamespace\u0026#39;, { name: \u0026#39;ecommerce.local\u0026#39;, vpc: props.vpc, description: \u0026#39;Service discovery for e-commerce microservices\u0026#39;, }); } } API Gateway HTTP API: export class ApiGatewayStack extends Stack { constructor(scope: Construct, id: string, props: ApiGatewayStackProps) { super(scope, id, props); const httpApi = new HttpApi(this, \u0026#39;EcommerceApi\u0026#39;, { apiName: \u0026#39;ecommerce-microservices-api\u0026#39;, description: \u0026#39;HTTP API for e-commerce microservices\u0026#39;, corsPreflight: { allowOrigins: [\u0026#39;*\u0026#39;], allowMethods: [CorsHttpMethod.ANY], allowHeaders: [\u0026#39;*\u0026#39;], }, }); // Add routes cho mỗi service  this.addServiceRoutes(httpApi, props.services); } private addServiceRoutes(api: HttpApi, services: ServiceInfo[]) { services.forEach(service =\u0026gt; { const integration = new HttpServiceDiscoveryIntegration( `${service.name}Integration`, service.cloudMapService, { vpcLink: this.vpcLink, } ); api.addRoutes({ path: `/api/v1/${service.path}/{proxy+}`, methods: [HttpMethod.ANY], integration, }); }); } } Giao tiếp Inter-Service Services giao tiếp với nhau sử dụng DNS names được cung cấp bởi Cloud Map:\n// Ví dụ: Order service gọi inventory service const inventoryServiceUrl = \u0026#39;http://inventory-service.ecommerce.local:3000\u0026#39;; async function checkInventory(productId) { const response = await fetch(`${inventoryServiceUrl}/api/inventory/${productId}`); return response.json(); } Monitoring và Observability Chúng ta sẽ triển khai monitoring toàn diện sử dụng CloudWatch:\nCloudWatch Logs:  Centralized logging cho tất cả microservices Structured JSON logs để parsing dễ dàng Custom log groups cho mỗi service  CloudWatch Metrics:  Request count và response times Error rates và HTTP status codes Custom business metrics  Nội dung:  Thiết lập Service Discovery với Cloud Map Cấu hình API Gateway HTTP API Triển khai Inter-Service Communication Thiết lập Monitoring và Alerting  "
},
{
	"uri": "/vi/4-s3log/4.4-configsessionlogs/",
	"title": "Theo dõi session logs",
	"tags": [],
	"description": "",
	"content": "Theo dõi session logs  Truy cập giao diện quản trị dịch vụ System Manager - Session Manager   Click tab Preferences. Click Edit.  Kéo chuột xuống phía dưới, tại mục S3 logging, click chọn Enable.   Bỏ chọn Allow only encrypted S3 buckets. Click chọn Choose a bucket name from the list. Chọn S3 bucket bạn đã tạo.   Kéo chuột xuống phía dưới, click Save để lưu cấu hình.\n  Truy cập giao diện quản trị dịch vụ System Manager - Session Manager\n   Click Start session. Click chọn Private Windows Instance. Click Start session.  Gõ lệnh ipconfig.   Gõ lệnh hostname. Click Terminate để thoát session, click Terminate 1 lần nữa để xác nhận.  Kiểm tra Session logs trong S3  Truy cập vào giao diện quản trị dịch vụ S3   Click vào tên S3 bucket chúng ta đã tạo cho bài lab.  Click vào tên file sessions log  Tại trang chi tiết objects , click Open.  File logs sẽ được mở ở 1 tab mới trên trình duyệt.Bạn có thể xem các câu lệnh đã được lưu trữ lại trong session logs.  "
},
{
	"uri": "/vi/2-prerequiste/2.1-createec2/2.1.4-createsecgroup/",
	"title": "Tạo các security group",
	"tags": [],
	"description": "",
	"content": "Tạo các security group Trong bước này chúng ta sẽ tiến hành tạo các security group được sử dụng cho các instance của chúng ta. Các bạn có thể thấy, các securiy group này sẽ không cần phải mở các port truyền thống để ssh như port 22 hoặc remote desktop thông qua port 3389.\nTạo security group cho Linux instance nằm trong public subnet  Truy cập giao diện quản trị dịch vụ VPC   Click Security Group. Click Create security group.  Tại mục Security group name, điền SG Public Linux Instance.   Tại mục Description, điền SG Public Linux Instance. Tại mục VPC, click dấu X để chọn lại Lab VPC bạn đã tạo cho bài lab này.  Giữ nguyên Outbound rule, kéo chuột xuống phía dưới.   Click Create security group.  Các bạn có thể thấy, security group chúng ta tạo sử dụng cho Linux public instance sẽ không cần phải mở các port truyền thống để ssh như port 22.\n\rTạo security group cho Windows instance nằm trong private subnet  Sau khi tạo thành công security group cho Linux instance nằm trong public subnet, click vào link Security Groups để quay trở lại danh sách Security groups.   Click Create security group.\n  Tại mục Security group name, điền SG Private Windows Instance.\n   Tại mục Description, điền SG Private Windows Instance. Tại mục VPC, click dấu X để chọn lại Lab VPC bạn đã tạo cho bài lab này.  Kéo chuột xuống phía dưới.   Thêm Outbound rule cho phép kết nối TCP 443 tới 10.10.0.0/16 ( CIDR của Lab VPC chúng ta đã tạo) Click Create security group.  Đối với Instance trong private subnet, chúng ta sẽ kết nối tới endpoint của Session Manager qua kết nối đã được mã hóa TLS. vì thế chúng ta cần cho phép kết nối chiều ra từ instance của mình tới VPC CIDR thông qua port 443.\n\rTạo security group cho VPC Endpoint  Trong bước này, chúng ta sẽ tạo security group cho VPC Endpoint của Session Manager. Sau khi tạo thành công security group cho Windows instance trong private subnet, click vào link Security Groups để quay trở lại danh sách Security groups. Click Create security group. Tại mục Security group name, điền SG VPC Endpoint.   Tại mục Description, điền SG VPC Endpoint. Tại mục VPC, click dấu X để chọn lại Lab VPC bạn đã tạo cho bài lab này.  Kéo chuột xuống phía dưới.   Xóa Outbound rule.  Thêm Inbound rule cho phép TCP 443 đến từ 10.10.0.0/16 ( CIDR của Lab VPC chúng ta đã tạo ).   Click Create security group.  Như vậy chúng ta đã tiến hành xong việc tạo các security group cần thiết cho các EC2 instance và VPC Endpoint.\n"
},
{
	"uri": "/vi/5-portfwd/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "\rQuan trọng: Để tránh phát sinh chi phí không cần thiết, hãy đảm bảo dọn dẹp tất cả tài nguyên sau khi hoàn thành workshop. CDK làm cho quá trình này đơn giản với lệnh cdk destroy.\n\rQuy trình Dọn dẹp Vì chúng ta đã sử dụng AWS CDK để triển khai hạ tầng, việc dọn dẹp rất đơn giản. CDK sẽ tự động xử lý thứ tự xóa và dependencies một cách phù hợp.\nBước 1: Điều hướng đến Thư mục CDK Project cd ecommerce-microservices-cdk Bước 2: Liệt kê Tất cả Deployed Stacks Trước tiên, hãy xem những stacks nào hiện đang được triển khai:\ncdk list Bạn sẽ thấy output tương tự:\nEcommerceNetworkStack\rEcommerceEcrStack EcommerceEcsStack\rEcommerceApiGatewayStack\rEcommerceMonitoringStack\rProductServiceStack\rInventoryServiceStack\rOrderServiceStack\rPaymentServiceStack\rSupplierServiceStack\rConsumerServiceStack\rBước 3: Destroy Tất cả Stacks Để destroy tất cả stacks cùng lúc:\ncdk destroy --all Hoặc destroy từng stack theo thứ tự ngược lại của dependencies:\n# Destroy service stacks trước cdk destroy ProductServiceStack cdk destroy InventoryServiceStack cdk destroy OrderServiceStack cdk destroy PaymentServiceStack cdk destroy SupplierServiceStack cdk destroy ConsumerServiceStack # Sau đó destroy infrastructure stacks cdk destroy EcommerceApiGatewayStack cdk destroy EcommerceMonitoringStack cdk destroy EcommerceEcsStack cdk destroy EcommerceEcrStack cdk destroy EcommerceNetworkStack Bước 4: Xác nhận Deletion CDK sẽ nhắc bạn xác nhận việc xóa từng stack. Gõ y để xác nhận:\nAre you sure you want to delete: ProductServiceStack (y/n)? y\rBước 5: Verify Cleanup Sau khi tất cả stacks được destroy, hãy verify trong AWS Console rằng các resources đã được dọn dẹp:\n CloudFormation: Kiểm tra rằng tất cả stacks hiển thị trạng thái DELETE_COMPLETE ECS: Verify clusters và services đã được deleted ECR: Kiểm tra rằng repositories đã được deleted (hoặc empty nếu bạn muốn giữ chúng) VPC: Xác nhận VPC và các resources liên quan đã được removed CloudWatch: Log groups có thể còn lại - xóa thủ công nếu cần  Tùy chọn: Dọn dẹp ECR Images Nếu bạn muốn giữ ECR repositories nhưng dọn dẹp images:\n# Liệt kê repositories aws ecr describe-repositories # Xóa tất cả images trong repository aws ecr batch-delete-image \\  --repository-name product-service \\  --image-ids imageTag=latest Manual Cleanup (Nếu cần) Trong một số trường hợp hiếm hoi, một số resources có thể không được xóa tự động. Kiểm tra các services này thủ công:\n S3 Buckets: Xóa các buckets còn lại và nội dung của chúng CloudWatch Log Groups: Remove log groups nếu chúng persist IAM Roles: Dọn dẹp bất kỳ IAM roles bị orphaned Security Groups: Remove bất kỳ security groups nào còn lại  Cost Verification Cuối cùng, kiểm tra AWS Cost Explorer để đảm bảo không có chi phí bất ngờ:\n Truy cập AWS Cost Explorer Đặt time range để cover workshop period của bạn Verify rằng costs ngừng tăng sau khi xóa resources  Troubleshooting Cleanup Issues Nếu bạn gặp vấn đề trong quá trình cleanup:\nStack Deletion Failed # Kiểm tra CloudFormation console để biết chi tiết lỗi # Vấn đề phổ biến: Resources vẫn đang được sử dụng, dependency conflicts # Force delete sau khi giải quyết dependencies cdk destroy StackName --force ECR Repository Not Empty # Xóa tất cả images trước aws ecr list-images --repository-name service-name aws ecr batch-delete-image --repository-name service-name --image-ids imageTag=tag VPC Deletion Failed # Thường do network interfaces hoặc security group dependencies còn lại # Kiểm tra EC2 console cho bất kỳ ENIs hoặc security groups còn lại Tóm tắt Việc sử dụng AWS CDK cho infrastructure deployment làm cho cleanup đơn giản hơn nhiều so với việc tạo resources thủ công. Lệnh cdk destroy tự động xử lý dependencies và đảm bảo thứ tự cleanup phù hợp.\nNhớ rằng: Luôn verify rằng tất cả resources đã được xóa đúng cách để tránh chi phí bất ngờ!\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createec2/2.1.5-createec2linux/",
	"title": "Tạo Public Linux EC2",
	"tags": [],
	"description": "",
	"content": " Truy cập giao diện quản trị dịch vụ EC2   Click Instances. Click Launch instances.  Tại trang Step 1: Choose an Amazon Machine Image (AMI).   Click Select để lựa chọn AMI Amazon Linux 2 AMI.  Tại trang Step 2: Choose an Instance Type.   Click chọn Instance type t2.micro. Click Next: Configure Instance Details.  Tại trang Step 3: Configure Instance Details   Tại mục Network chọn Lab VPC. Tại mục Subnet chọn Lab Public Subnet. Tại mục Auto-assign Public IP chọn Use subnet setting (Enable) Click Next: Add Storage.  Click Next: Add Tags để chuyển sang bước kế tiếp.   Click Next: Configure Security Group để chuyển sang bước kế tiếp.  Tại trang Step 6: Configure Security Group.   Chọn Select an existing security group. Chọn security group SG Public Linux Instance. Click Review and Launch.   Hộp thoại cảnh báo hiện lên vì chúng ta không cấu hình tường lửa cho phép kết nối vào port 22, Click Continue để tiếp tục.\n  Tại trang Step 7: Review Instance Launch.\n   Click Launch.  Tại hộp thoại Select an existing key pair or create a new key pair.   Click chọn Create a new key pair. Tại mục Key pair name điền LabKeypair. Click Download Key Pair và lưu xuống máy tính của bạn. Click Launch Instances để tạo máy chủ EC2.   Click View Instances để quay lại danh mục EC2 instances.\n  Click vào biểu tượng edit dưới cột Name.\n   Tại hộp thoại Edit Name điền Public Linux Instance. Click Save.  Tiếp theo chúng ta sẽ thực hiện tương tự để tạo 1 EC2 Instance Windows chạy trong Private subnet.\n"
},
{
	"uri": "/vi/2-prerequiste/2.1-createec2/2.1.6-createec2windows/",
	"title": "Tạo Private Windows EC2",
	"tags": [],
	"description": "",
	"content": " Truy cập giao diện quản trị dịch vụ EC2   Click Instances. Click Launch instances.  Tại trang Step 1: Choose an Amazon Machine Image (AMI).   Kéo chuột xuống phía dưới. Click Select để lựa chọn AMI Microsoft Windows Server 2019 Base.  Tại trang Step 2: Choose an Instance Type.   Click chọn Instance type t2.micro. Click Next: Configure Instance Details.  Tại trang Step 3: Configure Instance Details   Tại mục Network chọn Lab VPC. Tại mục Subnet chọn Lab Private Subnet. Tại mục Auto-assign Public IP chọn Use subnet setting (Disable) Click Next: Add Storage.  Click Next: Add Tags để chuyển sang bước kế tiếp.   Click Next: Configure Security Group để chuyển sang bước kế tiếp.  Tại trang Step 6: Configure Security Group.   Chọn Select an existing security group. Chọn security group SG Private Windows Instance. Click Review and Launch.   Hộp thoại cảnh báo hiện lên vì chúng ta không cấu hình tường lửa cho phép kết nối vào port 22, Click Continue để tiếp tục.\n  Tại trang Step 7: Review Instance Launch.\n   Click Launch.  Tại hộp thoại Select an existing key pair or create a new key pair.   Click chọn Choose an existing key pair. Tại mục Key pair name chọn LabKeypair. Click chọn I acknowledge that I have access to the corresponding private key file, and that without this file, I won\u0026rsquo;t be able to log into my instance.. Click Launch Instances để tạo máy chủ EC2.   Click View Instances để quay lại danh mục EC2 instances.\n  Click vào biểu tượng edit dưới cột Name.\n   Tại hộp thoại Edit Name điền Private Windows Instance. Click Save.  Tiếp theo chúng ta sẽ tiến hành tạo các IAM Role để phục vụ cho Session Manager.\n"
},
{
	"uri": "/vi/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/vi/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]